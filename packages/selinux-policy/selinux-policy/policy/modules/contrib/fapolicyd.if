## <summary>policy for fapolicyd</summary>

########################################
## <summary>
##	Execute fapolicyd_exec_t in the fapolicyd domain.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed to transition.
## </summary>
## </param>
#
interface(`fapolicyd_domtrans',`
	gen_require(`
		type fapolicyd_t, fapolicyd_exec_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, fapolicyd_exec_t, fapolicyd_t)
')

######################################
## <summary>
##	Execute fapolicyd in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`fapolicyd_exec',`
	gen_require(`
		type fapolicyd_exec_t;
	')

	corecmd_search_bin($1)
	can_exec($1, fapolicyd_exec_t)
')

########################################
## <summary>
##	Search fapolicyd lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`fapolicyd_search_lib',`
	gen_require(`
		type fapolicyd_var_lib_t;
	')

	allow $1 fapolicyd_var_lib_t:dir search_dir_perms;
	files_search_var_lib($1)
')

########################################
## <summary>
##	Read fapolicyd lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`fapolicyd_read_lib_files',`
	gen_require(`
		type fapolicyd_var_lib_t;
	')

	files_search_var_lib($1)
	read_files_pattern($1, fapolicyd_var_lib_t, fapolicyd_var_lib_t)
')

########################################
## <summary>
##	Manage fapolicyd lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`fapolicyd_manage_lib_files',`
	gen_require(`
		type fapolicyd_var_lib_t;
	')

	files_search_var_lib($1)
	manage_files_pattern($1, fapolicyd_var_lib_t, fapolicyd_var_lib_t)
')

########################################
## <summary>
##	Manage fapolicyd lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`fapolicyd_manage_lib_dirs',`
	gen_require(`
		type fapolicyd_var_lib_t;
	')

	files_search_var_lib($1)
	manage_dirs_pattern($1, fapolicyd_var_lib_t, fapolicyd_var_lib_t)
')

########################################
## <summary>
##	Read fapolicyd PID files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`fapolicyd_read_pid_files',`
	gen_require(`
		type fapolicyd_var_run_t;
	')

	files_search_pids($1)
	read_files_pattern($1, fapolicyd_var_run_t, fapolicyd_var_run_t)
')

########################################
## <summary>
##	All of the rules required to administrate
##	an fapolicyd environment
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`fapolicyd_admin',`
	gen_require(`
		type fapolicyd_t;
		type fapolicyd_var_lib_t;
		type fapolicyd_var_run_t;
		type fapolicyd_log_t;
	')

	allow $1 fapolicyd_t:process { signal_perms };
	ps_process_pattern($1, fapolicyd_t)

        tunable_policy(`deny_ptrace',`',`
                allow $1 fapolicyd_t:process ptrace;
        ')

	files_search_var_lib($1)
	admin_pattern($1, fapolicyd_var_lib_t)
	
	logging_search_logs($1)
        admin_pattern($1, fapolicyd_log_t)
		
	files_search_pids($1)
	admin_pattern($1, fapolicyd_var_run_t)
	optional_policy(`
		systemd_use_passwd_agent($1)
		systemd_passwd_agent_domtrans($1)
	')
')
